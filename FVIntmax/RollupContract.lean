import Mathlib.Data.Fintype.Basic
import Mathlib.Tactic

import FVIntmax.Wheels.Oracle
import FVIntmax.Wheels.Wheels

import FVIntmax.Block
import FVIntmax.TransactionBatch
import FVIntmax.Wheels

import FVIntmax.Wheels.AuthenticatedDictionary
import FVIntmax.Wheels.SignatureAggregation

namespace Intmax

set_option autoImplicit false

section RollupContract

/--
2.4

- Scontract := ùîπ*
-/
abbrev RollupState (K‚ÇÅ K‚ÇÇ V : Type) [Zero V] [Preorder V] (C Sigma : Type) :=
  List (Block K‚ÇÅ K‚ÇÇ C Sigma V)

namespace RollupState

/--
2.4

- When the rollup contract is deployed to the blockchain, it is initialized with
  the state () consisting of the empty list.
-/
def initial (K‚ÇÅ K‚ÇÇ V : Type) [Zero V] [Preorder V] (C Sigma : Type) : RollupState K‚ÇÅ K‚ÇÇ V C Sigma := []

-- section Valid

-- variable {K‚ÇÅ : Type} [DecidableEq K‚ÇÅ] {K‚ÇÇ C Sigma V : Type} [LE V] [OfNat V 0]

-- def isValid (s : RollupState K‚ÇÅ K‚ÇÇ V C Sigma) := ‚àÄ block ‚àà s, block.isValid

-- lemma isValid_cons {block : Block K‚ÇÅ K‚ÇÇ C Sigma V} {s : RollupState K‚ÇÅ K‚ÇÇ V C Sigma}
--   (h : block.isValid) (h‚ÇÅ : s.isValid) : RollupState.isValid (block :: s) := by unfold isValid; aesop

-- lemma isValid_initial {K‚ÇÅ : Type} [DecidableEq K‚ÇÅ] {K‚ÇÇ C Sigma V : Type} [LE V] [OfNat V 0] :
--   (initial K‚ÇÅ K‚ÇÇ V C Sigma).isValid := by simp [isValid, initial]

-- end Valid

end RollupState

/-
2.5
-/
section Depositing

/--
TODO(REVIEW): Does the order in which these get into the state matter? I'm choosing to prepend
              here because it's the more natural operation on `List` with better reduction behaviour.
              It's not a big deal tho, we can do `s ++ [Block.deposit addr value]` and then shuffle.
-/
def RollupState.deposit {K‚ÇÅ K‚ÇÇ C Sigma V : Type} [Zero V] [Preorder V]
                        (addr : K‚ÇÇ) (value : V‚Çä) (s : RollupState K‚ÇÅ K‚ÇÇ V C Sigma) :
                        RollupState K‚ÇÅ K‚ÇÇ V C Sigma := Block.mkDepositBlock _ _ _ addr value :: s

namespace Block

section Block

-- variable {K‚ÇÅ : Type} [DecidableEq K‚ÇÅ]
--          {K‚ÇÇ C Sigma V : Type} [OfNat V 0] [LE V]
--          {addr : K‚ÇÇ} {value : V}

-- /-
-- `deposit` preserves validity of the rollup state assuming the value is being deposited is nonnegative
-- and the state was valid in the first place.
-- -/
-- lemma isValid_deposit_of_nonneg
--   {addr : K‚ÇÇ} {value : V} {s : RollupState K‚ÇÅ K‚ÇÇ V C Sigma}
--   (h : 0 ‚â§ value) (h‚ÇÅ : s.isValid) : (s.deposit addr value).isValid :=
--   RollupState.isValid_cons (isValid_mkDepositBlock_of_nonneg h) h‚ÇÅ

end Block

end Block

end Depositing

/-
2.6
-/
section Transferring

variable {K‚ÇÅ : Type} [DecidableEq K‚ÇÅ] [Finite K‚ÇÅ]
         {K‚ÇÇ : Type} [Finite K‚ÇÇ]
         {sender sender' : K‚ÇÇ} {senders : List K‚ÇÇ}
         {V : Type} [DecidableEq V] [Finite V]

/-
Phase 1
-/

noncomputable def salt : UniquelyIndexed K‚ÇÇ := default

/--
This is a corollary following from the way that `UniquelyIndexed` types are constructed.
-/
lemma salt_injective : Function.Injective (salt (K‚ÇÇ := K‚ÇÇ)) := salt.injective

noncomputable def salts : List K‚ÇÇ ‚Üí List !K‚ÇÇ := List.map salt

/--
The only relevant property of salts.
-/
lemma injective_salts : Function.Injective (salts (K‚ÇÇ := K‚ÇÇ)) :=
  List.map_injective_iff.2 salt.injective

/--
I lied. This is also relevant.
-/
@[simp]
lemma length_salts {l : List K‚ÇÇ} : (salts l).length = l.length := by
  simp [salts]

section Transaction

variable {C Pi : Type} (Œõ : ‚Ñï) (aggregator : K‚ÇÅ) (extradata : ExtraDataT)
         [DecidableEq K‚ÇÇ]
         [AD : ADScheme K‚ÇÇ (!(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ)) C Pi]

/-
Just ignore this section.
-/
section AutomateZipping

attribute [aesop simp 9001 (rule_sets := [Intmax.aesop_dict])] List.map_fst_zip

end AutomateZipping

/--
PAPER:
- h‚Çõ ‚Üê H(t‚Çõ, salt‚Çõ)
-/
noncomputable def H : UniquelyIndexed (TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ) := default

lemma injective_H : Function.Injective (H (K‚ÇÅ := K‚ÇÅ) (K‚ÇÇ := K‚ÇÇ) (V := V)) := H.injective

/--
TODO(REVIEW) - Re. @Denisa wrt. one salt per one transaction;

I actually think this first step is correct irrespective of salting multiple transactions.
This is because this definition takes: `senders : List (K‚ÇÇ √ó TransactionBatch K‚ÇÅ K‚ÇÇ V)`, IOW
it already only expresses the relationship of a single batch being sent by each user.

As such, if there is some other definition further down the line that expresses the notion of transactions
being sent over and over or whatever else, the first step will repeat and you get a new salt - note that in this model,
you can't actually prove that the new salt is distinct (or even the same, for that matter), and this to me seems
like actually a good thing.

PAPER:
First, each sender s chooses a random salt salts, hashes their transaction batch with the salt
hs ‚Üê H(ts, salts) and sends hs to the aggregator.
-/
noncomputable def firstStep
  (senders : List (K‚ÇÇ √ó TransactionBatch K‚ÇÅ K‚ÇÇ V)) : List (!(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ)) :=
  let (senders, batches) := senders.unzip
  let salts              := salts senders
  batches.zipWith (Function.curry H) salts

@[simp]
lemma length_firstStep {l : List (K‚ÇÇ √ó TransactionBatch K‚ÇÅ K‚ÇÇ V)} :
  (firstStep l).length = l.length := by
  simp [firstStep]

lemma injective_firstStep : Function.Injective (firstStep (K‚ÇÅ := K‚ÇÅ) (K‚ÇÇ := K‚ÇÇ) (V := V)) := by
  unfold firstStep
  simp [salts]; simp [Function.Injective]

section LikelyUseless

@[deprecated firstStep]
noncomputable def firstStep'
  (senders : List (K‚ÇÇ √ó TransactionBatch K‚ÇÅ K‚ÇÇ V)) : List (K‚ÇÇ √ó !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ)) :=
  (senders.map Prod.fst).zip (firstStep senders)

@[deprecated injective_firstStep]
lemma injective_firstStep' : Function.Injective (firstStep' (K‚ÇÅ := K‚ÇÅ) (K‚ÇÇ := K‚ÇÇ) (V := V)) := by
  /-
    We construct second components of pairs in an injective fashion.
    As such, it does not matter what we zip them with, the injective property
    is preserved by virtue of extensionality of products.
  -/
  unfold firstStep'
  intros l‚ÇÅ l‚ÇÇ h; dsimp at h
  have : l‚ÇÅ.length = l‚ÇÇ.length := by
    simp only [List.zip_map_left] at h
    apply congrArg List.length at h
    simp at h
    exact h
  have h‚ÇÅ : (List.map Prod.fst l‚ÇÅ).length = (firstStep l‚ÇÅ).length := by simp
  rw [List.zip_eq_iff h‚ÇÅ (by simpa) (by simp)] at h
  exact injective_firstStep h.2

end LikelyUseless

def secondStep
  (userBatches : List (K‚ÇÇ √ó !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ)))
  (h : (userBatches.map Prod.fst).Nodup) :
  CommitT C K‚ÇÇ Pi :=
  let users := userBatches.map Prod.fst
  let batches := userBatches.map Prod.snd
  have : users.length = batches.length := by simp [users, batches]
  let dict : Dict K‚ÇÇ !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ) :=
  ‚ü®
    { k | k ‚àà users },
    ‚ü®
      Multiset.ofList (users.zipWith Sigma.mk batches),
      by simp only [Multiset.coe_nodupKeys]
         unfold List.NodupKeys
         rwa [List.keys_zipWith_sigma this]
    ‚ü©,
    by simp [Finmap.mem_def]
       rw [List.keys_zipWith_sigma this]
  ‚ü©
  ADScheme.Commit Œõ dict (C := C) (Pi := Pi)

/--
Follows from `ADScheme.correct_keys_eq`, i.e. authenticated dictionaries preserve keys.
-/
lemma dict_keys_secondStep_eq
  {userBatches : List (K‚ÇÇ √ó !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ))}
  (h : (userBatches.map Prod.fst).Nodup) {k} :
  k ‚àà (secondStep (K‚ÇÅ := K‚ÇÅ) (C := C) (V := V) (Pi := Pi) AD.Œõ userBatches h).keys ‚Üî
  k ‚àà userBatches.map Prod.fst := by simp only [secondStep]; dict

structure MessageT (C : Type) (K‚ÇÅ : Type) :=
  commitment : C
  aggregator : K‚ÇÅ
  extradata  : ExtraDataT

variable {K‚Çö : Type} [Nonempty K‚Çö]
         {K‚Çõ : Type} [Nonempty K‚Çõ] {Sigma: Type}
         [SignatureAggregation (MessageT C K‚ÇÅ) K‚Çö K‚Çõ Sigma]

/--
TODO(REVIEW):
A whatever existance of keys, I am not yet sure what a good representation is.
I am assuming we don't care that K<X> can see the keys of K<Y>, as this is already
only an assumption in the paper anyway.

@Denisa - What properties will need to hold here?
-/
noncomputable abbrev userKeys : K‚ÇÇ ‚Üí K‚Çö √ó K‚Çõ := Classical.arbitrary _

variable (userKeysAreGen : ‚àÄ user : K‚ÇÇ,
                             SimpleRandom.isRandom
                               (SignatureAggregation.KeyGen (M := MessageT C K‚ÇÅ) Sigma Œõ)
                               (userKeys (K‚Çö := K‚Çö) (K‚Çõ := K‚Çõ) user))

/--
TODO(REVIEW) - What on Earth is this... the messages are somehow made out of
commitment aggregator extradata?
-/
noncomputable def thirdStepSingleUser
                    (commitment : C)
                    (user : K‚ÇÇ)
                    (proof : Pi)
                    (saltBatch : !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ)) :
                    Option Sigma :=
  if ADScheme.Verify Œõ proof user saltBatch commitment
  then .some (SignatureAggregation.Sign K‚Çö (K‚Çõ := K‚Çõ) AD.Œõ (userKeys (K‚Çö := K‚Çö) (K‚Çõ := K‚Çõ) user).2 (MessageT.mk commitment aggregator extradata))
  else .none

noncomputable def thirdStep (commits : CommitT C K‚ÇÇ Pi √ó List (K‚ÇÇ √ó !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ)))
              (h : ‚àÄ k ‚àà commits.2.map Prod.fst, k ‚àà commits.1.keys) : List (Option Sigma) :=
  let userInfo   := commits.2
  let commits'   := commits.1
  let commitment := commits'.commitment
  let users      := userInfo.map Prod.fst
  let batches    := userInfo.map Prod.snd
  let proofs     := users.attach.map Œª k ‚Ü¶
                      commits'.dict.lookup (k := k.1) (by dsimp only [commits']; dict)
  List.zipWith3 (thirdStepSingleUser (K‚Çö := K‚Çö) (K‚Çõ := K‚Çõ) (Sigma := Sigma) AD.Œõ aggregator extradata commitment) users proofs batches

/--
  We assume no duplicate users. This is safe because the paper uses sets anyway.
-/
def transferBlockOfUsersWithBatches
  (usersWithBatches : List (K‚ÇÇ √ó TransactionBatch K‚ÇÅ K‚ÇÇ V))
  (h : (usersWithBatches.map Prod.fst).Nodup) : Nat :=
  /-
    NB 'sending' is modelled as a sequence of functions, no need to explicitly express this.
  -/
  let users : List K‚ÇÇ := usersWithBatches.map Prod.fst

  have h‚ÇÅ : users.Nodup := h

  /-
    PAPER: 1.

    First, each sender s chooses a random salt salts, hashes their transaction
    batch with the salt hs ‚Üê H(ts, salts), and sends hs to the aggregator.
  -/
  let hashedSaltyUsers : List !(TransactionBatch K‚ÇÅ K‚ÇÇ V √ó !K‚ÇÇ) := firstStep usersWithBatches
  /-
    The intermediate 'state' considering the model is described in terms of users/aggregators
    taking turns. As such, there is an implicit state in the sense that users do not forget
    information they compute.
  -/
  let s‚ÇÄ := users.zip hashedSaltyUsers

  have h‚ÇÇ : users.length = hashedSaltyUsers.length := by
    simp [hashedSaltyUsers, users]
  have h‚ÇÉ : (List.map Prod.fst s‚ÇÄ).Nodup := by
    rwa [List.map_fst_zip _ _ (le_of_eq h‚ÇÇ)]
  /-
    PAPER: 2.

    The aggregator collects all the transaction batch hashes from the senders.
    Let S‚Ä≤ ‚äÇ S be the subset of senders who sent a transaction batch hash
    to the aggregator. The aggregator then constructs the dictionary9 (S‚Ä≤, h)
    where hs is the transaction batch hash by s for all s ‚àà S‚Ä≤, and constructs a
    dictionary commitment and lookup proofs:
    (C, (S‚Ä≤, œÄ)) ‚Üê AD.Commit(S‚Ä≤, h).
    The aggregator sends to each user s ‚àà S‚Ä≤ the dictionary commitment C
    and the lookup proof œÄs for the user‚Äôs transaction batch hash

    NB the S‚Ä≤ ‚äÇ S who sent a transaction batch _already are_ the users _usersWithBatches_.
  -/
  let authDict : CommitT C K‚ÇÇ Pi := secondStep AD.Œõ s‚ÇÄ h‚ÇÉ

  let s‚ÇÅ := (authDict, s‚ÇÄ)

  /-
    This is true by `dict_keys_secondStep_eq` which uses the AD keys preservation property transitively.
  -/
  have h‚ÇÑ {k} : k ‚àà users ‚Üî k ‚àà authDict.keys := by
    dsimp only [authDict, hashedSaltyUsers]
    rw [dict_keys_secondStep_eq]
    dict

  /-
    PAPER: 3.
    
    Upon receiving the dictionary commitment and lookup proof, each user s
    checks if the lookup proof is valid with the commitment:
    AD.Verify(œÄs, s, hs, C) ?= True.
    If the lookup proof is valid, the user generates the signature
    œÉs ‚Üê SA.Sign(sks,(C, aggregator, extradata))
    The protocol allows anyone to be an aggregator for a transfer block, enabling
    maximum censorship resistance.
    Sending the transaction hash instead of the transaction itself gives privacy from
    the aggregator.
    See Appendix A.1 for the definition of a dictionary.
    and sends this signature to the aggregator.
  -/
  let signedMessages := thirdStep (K‚ÇÅ := K‚ÇÅ) (K‚ÇÇ := K‚ÇÇ) (V := V) (C := C) (Pi := Pi) (Sigma := Sigma) (K‚Çö := K‚Çö) (K‚Çõ := K‚Çõ) aggregator extradata s‚ÇÅ
                          (by dsimp only [s‚ÇÅ, s‚ÇÄ]; dict)
  42 

end Transaction

end Transferring

end RollupContract

end Intmax
