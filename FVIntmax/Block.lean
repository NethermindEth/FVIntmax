import Mathlib.Data.Finmap

namespace Intmax

-- transfer (aggregator : K‚ÇÅ) (extradata : ByteArray) (commitment : C) (validUsers : K‚ÇÇ) (sigma : Sigma)
/--
2.4

NB the `V` here does not _yet_ need the fact that it is a latticed-ordered abelian group.

ùîπ := Bdeposit ‚®ø Btransf er ‚®ø Bwithdrawal
-/
inductive Block (K‚ÇÅ K‚ÇÇ : Type) (C Sigma : Type)
                (V : Type) [OfNat V 0] [LE V] :=
  /--
    Bdeposit - (2.5 - Bdeposit := K‚ÇÇ √ó V+)
    
    TODO(REVIEW): > A deposit block contains only one deposit tx?
                  I have no intuition for this, but formally they state this is in fact the case.
  -/
  | deposit (recipient : K‚ÇÇ) (amount : {v : V // 0 ‚â§ v})
  /--
    Btransfer - (2.6 - Btransfer = Btransf er = K1 √ó {0, 1}‚àó √ó AD.C √ó P(K) √ó SA.Œ£)

    NB I can _not_ bring myself to abuse DTT to express `validUsers : K‚ÇÇ` beyond `K‚ÇÇ`.
    The intent is to subset en passant in subsequent statements about transfers.
  -/
  | transfer (aggregator : K‚ÇÅ) (extradata : ByteArray) (commitment : C) (validUsers : K‚ÇÇ) (sigma : Sigma)
  /--
    Bwithdrawal - (2.7 - Bwithdrawal = V^{K_1}_+)

    NB we will see later about total/partial in this particular instance.
  -/ 
  | withdraval (withdravals : Finmap (Œª _ : K‚ÇÅ ‚Ü¶ {v : V // 0 ‚â§ v}))

end Intmax
